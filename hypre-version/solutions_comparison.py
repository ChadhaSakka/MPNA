#!/usr/bin/env python3
import numpy as np
import matplotlib.pyplot as plt

# Grille spatiale
N = 100
x = np.linspace(0, 1, N+1)

# Solutions finales obtenues par chaque méthode (d'après vos résultats)
# Méthode explicite
u_explicit = np.array([
    1.771811, 1.771811, 1.770964, 1.769256, 1.766656, 1.763120, 1.758587, 1.752979,
    1.746198, 1.738130, 1.728635, 1.717552, 1.704693, 1.689840, 1.672743, 1.653116,
    1.630632, 1.604919, 1.575551, 1.542045, 1.503850, 1.468599, 1.436009, 1.405833,
    1.377855, 1.351882, 1.327744, 1.305288, 1.284379, 1.264896, 1.246729, 1.229778,
    1.213954, 1.199177, 1.185372, 1.172471, 1.160413, 1.149142, 1.138605, 1.128755,
    1.119546, 1.110940, 1.102897, 1.095382, 1.088363, 1.081809, 1.075692, 1.069985,
    1.064663, 1.059702, 1.055081, 1.050779, 1.046777, 1.043055, 1.039597, 1.036387,
    1.033408, 1.030647, 1.028089, 1.025722, 1.023533, 1.021511, 1.019644, 1.017922,
    1.016336, 1.014876, 1.013533, 1.012299, 1.011167, 1.010129, 1.009178, 1.008307,
    1.007512, 1.006785, 1.006122, 1.005518, 1.004968, 1.004467, 1.004012, 1.003599,
    1.003224, 1.002884, 1.002576, 1.002297, 1.002044, 1.001815, 1.001608, 1.001420,
    1.001250, 1.001096, 1.000955, 1.000827, 1.000709, 1.000601, 1.000501, 1.000407,
    1.000319, 1.000236, 1.000155, 1.000077, 1.000000
])

# Méthode implicite linéarisée
u_implicit = np.array([
    1.267056, 1.267056, 1.664294, 1.776406, 1.808390, 1.817517, 1.820121, 1.820864,
    1.821076, 1.821136, 1.821152, 1.821152, 1.821139, 1.821088, 1.820906, 1.820270,
    1.818040, 1.810226, 1.782839, 1.686855, 1.348022, 1.182092, 1.096568, 1.051523,
    1.027569, 1.014773, 1.007922, 1.004249, 1.002280, 1.001223, 1.000657, 1.000352,
    1.000189, 1.000101, 1.000054, 1.000029, 1.000016, 1.000008, 1.000005, 1.000002,
    1.000001, 1.000001, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000,
    1.000000, 1.000000, 1.000000, 1.000000
])

# Méthode de Newton-Raphson
u_newton = np.array([
    1.030158, 1.030158, 1.053625, 1.074634, 1.093325, 1.109823, 1.124244, 1.136687,
    1.147240, 1.155979, 1.162966, 1.168253, 1.171878, 1.173867, 1.174235, 1.174235,
    1.172986, 1.170109, 1.165585, 1.159379, 1.151448, 1.141733, 1.132669, 1.124207,
    1.116306, 1.108925, 1.102028, 1.095581, 1.089553, 1.083915, 1.078642, 1.073707,
    1.069089, 1.064766, 1.060718, 1.056928, 1.053379, 1.050054, 1.046939, 1.044020,
    1.041285, 1.038722, 1.036319, 1.034067, 1.031956, 1.029976, 1.028120, 1.026379,
    1.024746, 1.023215, 1.021779, 1.020431, 1.019167, 1.017981, 1.016868, 1.015824,
    1.014844, 1.013924, 1.013061, 1.012250, 1.011489, 1.010775, 1.010104, 1.009474,
    1.008882, 1.008326, 1.007803, 1.007312, 1.006850, 1.006416, 1.006008, 1.005624,
    1.005262, 1.004922, 1.004602, 1.004300, 1.004015, 1.003746, 1.003492, 1.003253,
    1.003026, 1.002812, 1.002608, 1.002416, 1.002233, 1.002059, 1.001893, 1.001734,
    1.001583, 1.001438, 1.001299, 1.001165, 1.001036, 1.000910, 1.000789, 1.000670,
    1.000555, 1.000441, 1.000329, 1.000219, 1.000109, 1.000000
])

# Tracer les profils de u(x) pour les trois méthodes
plt.figure(figsize=(10, 6))
plt.plot(x, u_explicit, 'o-', label="Explicite")
plt.plot(x, u_implicit, 's-', label="Implicite linéarisée")
plt.plot(x, u_newton, '^-', label="Newton-Raphson")
plt.xlabel("x")
plt.ylabel("u(x)")
plt.title("Comparaison des solutions finales u(x)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.savefig("solution_profiles.png", dpi=300)
plt.show()

